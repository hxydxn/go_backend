// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: app/api/proto/credit.proto

package credit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CreditClient is the client API for Credit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreditClient interface {
	Credit(ctx context.Context, in *CreditRequest, opts ...grpc.CallOption) (*CreditResponse, error)
}

type creditClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditClient(cc grpc.ClientConnInterface) CreditClient {
	return &creditClient{cc}
}

func (c *creditClient) Credit(ctx context.Context, in *CreditRequest, opts ...grpc.CallOption) (*CreditResponse, error) {
	out := new(CreditResponse)
	err := c.cc.Invoke(ctx, "/credit.Credit/Credit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditServer is the server API for Credit service.
// All implementations must embed UnimplementedCreditServer
// for forward compatibility
type CreditServer interface {
	Credit(context.Context, *CreditRequest) (*CreditResponse, error)
	mustEmbedUnimplementedCreditServer()
}

// UnimplementedCreditServer must be embedded to have forward compatible implementations.
type UnimplementedCreditServer struct {
}

func (UnimplementedCreditServer) Credit(context.Context, *CreditRequest) (*CreditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credit not implemented")
}
func (UnimplementedCreditServer) mustEmbedUnimplementedCreditServer() {}

// UnsafeCreditServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreditServer will
// result in compilation errors.
type UnsafeCreditServer interface {
	mustEmbedUnimplementedCreditServer()
}

func RegisterCreditServer(s grpc.ServiceRegistrar, srv CreditServer) {
	s.RegisterService(&Credit_ServiceDesc, srv)
}

func _Credit_Credit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditServer).Credit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/credit.Credit/Credit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditServer).Credit(ctx, req.(*CreditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Credit_ServiceDesc is the grpc.ServiceDesc for Credit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Credit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "credit.Credit",
	HandlerType: (*CreditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Credit",
			Handler:    _Credit_Credit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/api/proto/credit.proto",
}
